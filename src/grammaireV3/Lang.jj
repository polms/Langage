/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Lang.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
               
                        
  //DEBUG_PARSER = true;
  //DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Lang)
package grammaireV3;
import java.util.HashMap;
import java.util.ArrayList;

public class Lang/*@bgen(jjtree)*/implements LangTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTLangState jjtree = new JJTLangState();

/*@egen*/ 
  public static void main(String args [])
  {
    ASTStart n = null;
    try
    {
      Lang l = new Lang(new java.io.FileReader("D:\\eclipse-workspace\\Langage\\src\\grammaireV3\\exemple.lang"));
      n = Lang.Start();
      n.dump("--");
      n.run();
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops." + n.symbols);
      e.printStackTrace();
    }
  }
}

PARSER_END(Lang)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < SUPTO : ">" >
| < INFTO : "<" >
| < SUPEQUALTO : ">=" >
| < INFEQUALTO : "<=" >
| < EQUAL : "=" >
| < NOTEQUAL : "<>" >
}

TOKEN :
{
  < ALGO : "algo" >
| < DEBUT : "begin" >
| < VAR : "var" >
| < CONST : "const" >
| < END : "end" >
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < ENDIF: "endif" >
| < WHILE: "while" >
| < DO: "do" >
| < ENDWHILE: "endwhile" >
| < FOR: "for" >
| < SWITCH: "switch" >
| < PROCEDURE: "procedure" >
| < FUNCTION: "function" >
| < RETURN: "return" >
| < TRUE : "true" >
| < FALSE : "false" >
}

TOKEN :
{
  < NOMBRE : (< CHIFFRE >)+("."(< CHIFFRE >)+)* >
| < CHIFFRE : [ "0"-"9" ] >
| < TYPE : ("int" | "boolean" | "string" | "float") >
| < IDENT : < LETTRE > (< LETTRE > | < CHIFFRE >)* >
| < LETTRE : (< LETTREMIN > | <LETTREMAJ >) >
| < #LETTREMIN : [ "a"-"z" ] >
| < #LETTREMAJ : [ "A"-"Z" ] >
| < STRING : ("\"" (< LETTRE > | " ")* "\"") >
}



ASTStart Start() :
{/*@bgen(jjtree) Start */
 ASTStart jjtn000 = new ASTStart(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  < ALGO > t = < IDENT > declarations() < DEBUT > instructions() < END > sroutines()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declarations():
{/*@bgen(jjtree) declarations */
  ASTdeclarations jjtn000 = new ASTdeclarations(JJTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) declarations */
        try {
/*@egen*/
	declarationVariables()
	declarationConstantes()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void declarationVariables()      :
{ }
{
	< VAR >
	(  
	  declarationVariable()
	)+
| { }
}

void declarationVariable()          :
{/*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) variable */
        try {
/*@egen*/
	typage() ";"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void declarationConstantes()      :
{ }
{
	< CONST >
	(
	  declarationConstante()
	)+
| {}
}

void declarationConstante()          :
{/*@bgen(jjtree) constant */
  ASTconstant jjtn000 = new ASTconstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) constant */
  try {
/*@egen*/
  typage() "<-" vconst() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void typage()      :
{ Token t; }
{
	t = < TYPE >/*@bgen(jjtree) type */
                     {
                       ASTtype jjtn001 = new ASTtype(JJTTYPE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                     }
                     try {
/*@egen*//*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                     }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
                     }
/*@egen*/     
	t = < IDENT >/*@bgen(jjtree) ident */
                      {
                        ASTident jjtn002 = new ASTident(JJTIDENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                      }
/*@egen*/ { jjtn002.value = t.image; }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                        }
                      }
/*@egen*/      
}

void instructions():
{/*@bgen(jjtree) instructions */
  ASTinstructions jjtn000 = new ASTinstructions(JJTINSTRUCTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) instructions */
        try {
/*@egen*/
	(
	  instruction()
	)*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void instruction()      :
{ }
{
	(
	  LOOKAHEAD(2) 
	  affectation()
	| appelProcedure()
	) ";"
| structures()
}

void affectation()        :
{/*@bgen(jjtree) affect */
  ASTaffect jjtn000 = new ASTaffect(JJTAFFECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) affect */
  try {
/*@egen*/
  LOOKAHEAD(2) 
	t = < IDENT >/*@bgen(jjtree) ident */
                      {
                        ASTident jjtn001 = new ASTident(JJTIDENT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                      }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
                      }
/*@egen*/       ":="/*@bgen(jjtree) valueLog */
                                                              {
                                                                ASTvalueLog jjtn002 = new ASTvalueLog(JJTVALUELOG);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*/ expLog()/*@bgen(jjtree)*/
                                                              } catch (Throwable jjte002) {
                                                                if (jjtc002) {
                                                                  jjtree.clearNodeScope(jjtn002);
                                                                  jjtc002 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte002 instanceof RuntimeException) {
                                                                  throw (RuntimeException)jjte002;
                                                                }
                                                                if (jjte002 instanceof ParseException) {
                                                                  throw (ParseException)jjte002;
                                                                }
                                                                throw (Error)jjte002;
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                }
                                                              }
/*@egen*/          
| 	t = < IDENT >/*@bgen(jjtree) ident */
                      {
                        ASTident jjtn003 = new ASTident(JJTIDENT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
                      }
                      try {
/*@egen*//*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                      }
/*@egen*/ { jjtn003.value = t.image; }/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
                      }
/*@egen*/       "<-" laffectation()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void laffectation()       :
{/*@bgen(jjtree) value */
  ASTvalue jjtn000 = new ASTvalue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) value */
        try {
/*@egen*/ 
	expArith()
| t = < STRING >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}

void appelProcedure()          :
{/*@bgen(jjtree) callProc */
  ASTcallProc jjtn000 = new ASTcallProc(JJTCALLPROC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) callProc */
  try {
/*@egen*/
  t = < IDENT > { jjtn000.value = t.image; } "(" arguments() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void appelFonction()           :
{/*@bgen(jjtree) callFunct */
  ASTcallFunct jjtn000 = new ASTcallFunct(JJTCALLFUNCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) callFunct */
  try {
/*@egen*/
  t = < IDENT > { jjtn000.value = t.image; } "(" arguments() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void arguments()      :
{ }
{
	(
	  argument()
	  (
	    "," argument()
	  )*
	)
| { }
	
}

void argument()          :
{/*@bgen(jjtree) argument */
  ASTargument jjtn000 = new ASTargument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) argument */
  try {
/*@egen*/
  t = < STRING >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t.image; }
| LOOKAHEAD(2)  t = < IDENT >/*@bgen(jjtree) ident */
                              {
                                ASTident jjtn001 = new ASTident(JJTIDENT);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*//*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                              }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
                              }
/*@egen*/      
| expArith()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

boolean bool()      :
{/*@bgen(jjtree) bool */
  ASTbool jjtn000 = new ASTbool(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) bool */
  try {
/*@egen*/
  t = < TRUE >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.value = t.image; return Boolean.parseBoolean(t.image);}
| t = < FALSE >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{ jjtn000.value = t.image; return Boolean.parseBoolean(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void vconst()        :
{/*@bgen(jjtree) vconst */
  ASTvconst jjtn000 = new ASTvconst(JJTVCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; boolean b;}
{/*@bgen(jjtree) vconst */
  try {
/*@egen*/
  b = bool()/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { jjtn000.value = b; }
| t = < STRING >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t.image; }
| t = < NOMBRE >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void structures()      :
{ }
{
	sif()
| swhile()
/*| sfor()
| sswitch()*/
}

void sif()     :
{/*@bgen(jjtree) sif */
  ASTsif jjtn000 = new ASTsif(JJTSIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) sif */
        try {
/*@egen*/
	< IF > "(" expLog() ")" < THEN > instructions()
	(
	  < ELSE > instructions()
	| { }
	)
	< ENDIF >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void swhile()        :
{/*@bgen(jjtree) swhile */
  ASTswhile jjtn000 = new ASTswhile(JJTSWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) swhile */
        try {
/*@egen*/
	< WHILE > "(" expLog() ")" < DO > instructions() <  ENDWHILE >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void sroutines():
{/*@bgen(jjtree) sroutines */
  ASTsroutines jjtn000 = new ASTsroutines(JJTSROUTINES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) sroutines */
try {
/*@egen*/
(    function()
| procedure()
)*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void procedure():
{/*@bgen(jjtree) procedure */
  ASTprocedure jjtn000 = new ASTprocedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) procedure */
        try {
/*@egen*/
	< PROCEDURE > t = < IDENT > { jjtn000.value = t.image; }
	"(" params()  ")"
	declarations()
	< DEBUT >
	instructions()
	< END >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void function():
{/*@bgen(jjtree) function */
  ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) function */
        try {
/*@egen*/
	< FUNCTION > t = < TYPE >/*@bgen(jjtree) return_type */
                                  {
                                    ASTreturn_type jjtn001 = new ASTreturn_type(JJTRETURN_TYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                  }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/            
	t = < IDENT > { jjtn000.value = t.image; }
	"(" params()  ")"
	declarations()
	< DEBUT >
	instructions()
	< RETURN > t = < IDENT >/*@bgen(jjtree) ident */
                                {
                                  ASTident jjtn002 = new ASTident(JJTIDENT);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                }
/*@egen*/{ jjtn002.value = t.image; }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/       ";"
	< END >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void params():
{/*@bgen(jjtree) params */
  ASTparams jjtn000 = new ASTparams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) params */
  try {
/*@egen*/
  param()
  (    "," param()
  )*
|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ { }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void param():
{/*@bgen(jjtree) param */
  ASTparam jjtn000 = new ASTparam(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) param */
        try {
/*@egen*/
	typage()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//===============================
// EXPRESSIONS LOGIQUES
//===============================

void expLog()      :
{}
{
  termLog()
  (
    (
      < OR >/*@bgen(jjtree) #or( 2) */
             {
               ASTor jjtn001 = new ASTor(JJTOR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ termLog()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
             }
/*@egen*/       
    )
  )*
}

void termLog()      :
{}
{
  unaryLog()
  (
    (
      < AND >/*@bgen(jjtree) #and( 2) */
              {
                ASTand jjtn001 = new ASTand(JJTAND);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ unaryLog()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
              }
/*@egen*/        
    )
  )*
}

void unaryLog()      :
{}
{
  < NOT >/*@bgen(jjtree) #not( 1) */
          {
            ASTnot jjtn001 = new ASTnot(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ elementLog()/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
          }
/*@egen*/        
| elementLog()
}
  
void elementLog()      :
{}
{
  LOOKAHEAD(3) 
  booleen()
| comparaison()
}

void comparaison()      :
{/*@bgen(jjtree) comp */
 ASTcomp jjtn000 = new ASTcomp(JJTCOMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String t;}
{/*@bgen(jjtree) comp */
  try {
/*@egen*/
  expArith()
  t = opeComp() { jjtn000.value = t; }
  expArith()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String opeComp()      :
{}
{
  < EQUAL >
  {
    return Lang.getToken(0).image;
  }
| < NOTEQUAL >
  {
    return Lang.getToken(0).image;
  }
| < SUPTO >
  {
    return Lang.getToken(0).image;
  }
| < INFTO >
  {
    return Lang.getToken(0).image;
  }
| < SUPEQUALTO >
  {
    return Lang.getToken(0).image;
  }
| < INFEQUALTO >
  {
    return Lang.getToken(0).image;
  }
}

void booleen()      :
{}
{
  bool() 
| appelFonction()
|  "("  expLog()/*@bgen(jjtree) bool */
                 {
                   ASTbool jjtn001 = new ASTbool(JJTBOOL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/      
}


//===============================
// EXPRESSIONS ARITHMETIQUES
//===============================

void expArith()      :
{}
{
  term()
  (
      < PLUS >/*@bgen(jjtree) #plus( 2) */
               {
                 ASTplus jjtn001 = new ASTplus(JJTPLUS);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/ term()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
               }
/*@egen*/         
    | < MINUS >/*@bgen(jjtree) #minus( 2) */
                {
                  ASTminus jjtn002 = new ASTminus(JJTMINUS);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ term()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/          
  )*
}

void term()      :
{}
{
  unary()
  (
      < MULTIPLY >/*@bgen(jjtree) #mul( 2) */
                   {
                     ASTmul jjtn001 = new ASTmul(JJTMUL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ unary()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
                   }
/*@egen*/        
    | < DIVIDE >/*@bgen(jjtree) #div( 2) */
                 {
                   ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ unary()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
                 }
/*@egen*/        
    )*
}

void unary()      :
{}
{
  < MINUS >/*@bgen(jjtree) #min( 1) */
            {
              ASTmin jjtn001 = new ASTmin(JJTMIN);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ element()/*@bgen(jjtree)*/
            } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                throw (RuntimeException)jjte001;
              }
              if (jjte001 instanceof ParseException) {
                throw (ParseException)jjte001;
              }
              throw (Error)jjte001;
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
            }
/*@egen*/         
| element()
}

void element()      :
{ Token t; }
{
  t = < NOMBRE >/*@bgen(jjtree) arith */
                 {
                   ASTarith jjtn001 = new ASTarith(JJTARITH);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                 }
/*@egen*/ { jjtn001.value = t.image; }/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
                 }
/*@egen*/      
| "(" expArith()/*@bgen(jjtree) arith */
                 {
                   ASTarith jjtn002 = new ASTarith(JJTARITH);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/       
| LOOKAHEAD(2)
   appelFonction()
| t = < IDENT >/*@bgen(jjtree) ident */
                {
                  ASTident jjtn003 = new ASTident(JJTIDENT);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtc003 = false;
                }
/*@egen*/ { jjtn003.value = t.image; }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
                }
/*@egen*/      
}

