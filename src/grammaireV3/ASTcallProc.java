/* Generated By:JJTree: Do not edit this line. ASTcallProc.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package grammaireV3;

public
class ASTcallProc extends SimpleNode {
  public ASTcallProc(int id) {
    super(id);
  }

  public ASTcallProc(Lang p, int id) {
    super(p, id);
  }
  
  public void run() throws Exception {
	  String name = (String)this.value;
	  int num = this.jjtGetNumChildren();
	  
	  if (this.children != null)
	  for (Node n : this.children)
		  ((MyNode)n).run();
	  
	  if (name.equals("print")) {
		  String ret = "";
		  for (int i=0; i<num;i++) {
			  Object o = MyNode.pop(); 
		  	  ret = o.toString() + " " +ret;
		  }
		  System.out.println(ret);
	  } else if (name.equals("debug")) {
		  System.out.println(this.get_context_here());
	  } else if (MyNode.routinesTable.containsKey(name)) {
		  SimpleNode routine = MyNode.routinesTable.get(name);
		  if (MyNode.nb_args(routine) != num)
			  throw new Exception("Incorrect number of parameters for procedure "+name);
		  MyNode.routinesTable.get(name).run();
	  } else {
		  throw new Exception("Attempted to call undefined procedure "+(String)this.value);
	  }
  }

}
/* JavaCC - OriginalChecksum=42f4329c7059699a522aa96d032d47b5 (do not edit this line) */
