/* Generated By:JJTree&JavaCC: Do not edit this line. Lang.java */
package grammaireV3;
import java.util.HashMap;
import java.util.ArrayList;

public class Lang/*@bgen(jjtree)*/implements LangTreeConstants, LangConstants {/*@bgen(jjtree)*/
  protected static JJTLangState jjtree = new JJTLangState();public static void main(String args [])
  {
    ASTStart n = null;
    try
    {
      Lang l = new Lang(new java.io.FileReader("D:\u005c\u005ceclipse-workspace\u005c\u005cLangage\u005c\u005csrc\u005c\u005cgrammaireV3\u005c\u005cexemple.lang"));
      n = Lang.Start();
      n.dump("--");
      n.run();
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops." + n.symbols);
      e.printStackTrace();
    }
  }

  static final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
 ASTStart jjtn000 = new ASTStart(JJTSTART);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(ALGO);
      t = jj_consume_token(IDENT);
      declarations();
      jj_consume_token(DEBUT);
      instructions();
      jj_consume_token(END);
      sroutines();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.value = t.image;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void declarations() throws ParseException {
 /*@bgen(jjtree) declarations */
  ASTdeclarations jjtn000 = new ASTdeclarations(JJTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      declarationVariables();
      declarationConstantes();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declarationVariables() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      label_1:
      while (true) {
        declarationVariable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  static final public void declarationVariable() throws ParseException {
 /*@bgen(jjtree) variable */
  ASTvariable jjtn000 = new ASTvariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      typage();
      jj_consume_token(45);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void declarationConstantes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      jj_consume_token(CONST);
      label_2:
      while (true) {
        declarationConstante();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
      }
      break;
    default:
      jj_la1[3] = jj_gen;

    }
  }

  static final public void declarationConstante() throws ParseException {
 /*@bgen(jjtree) constant */
  ASTconstant jjtn000 = new ASTconstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      typage();
      jj_consume_token(46);
      vconst();
      jj_consume_token(45);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void typage() throws ParseException {
  Token t;
    t = jj_consume_token(TYPE);
                       ASTtype jjtn001 = new ASTtype(JJTTYPE);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
    try {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtc001 = false;
                       jjtn001.value = t.image;
    } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                       }
    }
    t = jj_consume_token(IDENT);
                        ASTident jjtn002 = new ASTident(JJTIDENT);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
    try {
                        jjtree.closeNodeScope(jjtn002, true);
                        jjtc002 = false;
                        jjtn002.value = t.image;
    } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                        }
    }
  }

  static final public void instructions() throws ParseException {
 /*@bgen(jjtree) instructions */
  ASTinstructions jjtn000 = new ASTinstructions(JJTINSTRUCTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case IDENT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        instruction();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      if (jj_2_1(2)) {
        affectation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          appelProcedure();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(45);
      break;
    case IF:
    case WHILE:
      structures();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void affectation() throws ParseException {
 /*@bgen(jjtree) affect */
  ASTaffect jjtn000 = new ASTaffect(JJTAFFECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_2(2)) {
        t = jj_consume_token(IDENT);
                        ASTident jjtn001 = new ASTident(JJTIDENT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
        try {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtc001 = false;
                        jjtn001.value = t.image;
        } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
        }
        jj_consume_token(47);
                                                                ASTvalueLog jjtn002 = new ASTvalueLog(JJTVALUELOG);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
        try {
          expLog();
        } catch (Throwable jjte002) {
                                                                if (jjtc002) {
                                                                  jjtree.clearNodeScope(jjtn002);
                                                                  jjtc002 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte002 instanceof RuntimeException) {
                                                                  {if (true) throw (RuntimeException)jjte002;}
                                                                }
                                                                if (jjte002 instanceof ParseException) {
                                                                  {if (true) throw (ParseException)jjte002;}
                                                                }
                                                                {if (true) throw (Error)jjte002;}
        } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002, true);
                                                                }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                        ASTident jjtn003 = new ASTident(JJTIDENT);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
          try {
                        jjtree.closeNodeScope(jjtn003, true);
                        jjtc003 = false;
                        jjtn003.value = t.image;
          } finally {
                        if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, true);
                        }
          }
          jj_consume_token(46);
          laffectation();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void laffectation() throws ParseException {
 /*@bgen(jjtree) value */
  ASTvalue jjtn000 = new ASTvalue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOMBRE:
      case IDENT:
      case 48:
        expArith();
        break;
      case STRING:
        t = jj_consume_token(STRING);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = t.image;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void appelProcedure() throws ParseException {
 /*@bgen(jjtree) callProc */
  ASTcallProc jjtn000 = new ASTcallProc(JJTCALLPROC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
                  jjtn000.value = t.image;
      jj_consume_token(48);
      arguments();
      jj_consume_token(49);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void appelFonction() throws ParseException {
 /*@bgen(jjtree) callFunct */
  ASTcallFunct jjtn000 = new ASTcallFunct(JJTCALLFUNCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
                  jjtn000.value = t.image;
      jj_consume_token(48);
      arguments();
      jj_consume_token(49);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void arguments() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case NOMBRE:
    case IDENT:
    case STRING:
    case 48:
      argument();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(50);
        argument();
      }
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  static final public void argument() throws ParseException {
 /*@bgen(jjtree) argument */
  ASTargument jjtn000 = new ASTargument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        t = jj_consume_token(STRING);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = t.image;
        break;
      default:
        jj_la1[11] = jj_gen;
        if (jj_2_3(2)) {
          t = jj_consume_token(IDENT);
                                ASTident jjtn001 = new ASTident(JJTIDENT);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
          try {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtc001 = false;
                                jjtn001.value = t.image;
          } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case NOMBRE:
          case IDENT:
          case 48:
            expArith();
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public boolean bool() throws ParseException {
 /*@bgen(jjtree) bool */
  ASTbool jjtn000 = new ASTbool(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return Boolean.parseBoolean(t.image);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.value = t.image; {if (true) return Boolean.parseBoolean(t.image);}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void vconst() throws ParseException {
 /*@bgen(jjtree) vconst */
  ASTvconst jjtn000 = new ASTvconst(JJTVCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t; boolean b;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
        b = bool();
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.value = b;
        break;
      case STRING:
        t = jj_consume_token(STRING);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = t.image;
        break;
      case NOMBRE:
        t = jj_consume_token(NOMBRE);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = t.image;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void structures() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      sif();
      break;
    case WHILE:
      swhile();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void sif() throws ParseException {
 /*@bgen(jjtree) sif */
  ASTsif jjtn000 = new ASTsif(JJTSIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(48);
      expLog();
      jj_consume_token(49);
      jj_consume_token(THEN);
      instructions();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        instructions();
        break;
      default:
        jj_la1[16] = jj_gen;

      }
      jj_consume_token(ENDIF);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void swhile() throws ParseException {
 /*@bgen(jjtree) swhile */
  ASTswhile jjtn000 = new ASTswhile(JJTSWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(48);
      expLog();
      jj_consume_token(49);
      jj_consume_token(DO);
      instructions();
      jj_consume_token(ENDWHILE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void sroutines() throws ParseException {
 /*@bgen(jjtree) sroutines */
  ASTsroutines jjtn000 = new ASTsroutines(JJTSROUTINES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROCEDURE:
        case FUNCTION:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FUNCTION:
          function();
          break;
        case PROCEDURE:
          procedure();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void procedure() throws ParseException {
 /*@bgen(jjtree) procedure */
  ASTprocedure jjtn000 = new ASTprocedure(JJTPROCEDURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PROCEDURE);
      t = jj_consume_token(IDENT);
                                      jjtn000.value = t.image;
      jj_consume_token(48);
      params();
      jj_consume_token(49);
      declarations();
      jj_consume_token(DEBUT);
      instructions();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void function() throws ParseException {
 /*@bgen(jjtree) function */
  ASTfunction jjtn000 = new ASTfunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(FUNCTION);
      t = jj_consume_token(TYPE);
                                    ASTreturn_type jjtn001 = new ASTreturn_type(JJTRETURN_TYPE);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
      try {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                    jjtn001.value = t.image;
      } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
      }
      t = jj_consume_token(IDENT);
                        jjtn000.value = t.image;
      jj_consume_token(48);
      params();
      jj_consume_token(49);
      declarations();
      jj_consume_token(DEBUT);
      instructions();
      jj_consume_token(RETURN);
      t = jj_consume_token(IDENT);
                                  ASTident jjtn002 = new ASTident(JJTIDENT);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
      try {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                  jjtn002.value = t.image;
      } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
      }
      jj_consume_token(45);
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void params() throws ParseException {
 /*@bgen(jjtree) params */
  ASTparams jjtn000 = new ASTparams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        param();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 50:
            ;
            break;
          default:
            jj_la1[19] = jj_gen;
            break label_6;
          }
          jj_consume_token(50);
          param();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;

      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void param() throws ParseException {
 /*@bgen(jjtree) param */
  ASTparam jjtn000 = new ASTparam(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      typage();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//===============================
// EXPRESSIONS LOGIQUES
//===============================
  static final public void expLog() throws ParseException {
    termLog();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(OR);
               ASTor jjtn001 = new ASTor(JJTOR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
        termLog();
      } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  2);
               }
      }
    }
  }

  static final public void termLog() throws ParseException {
    unaryLog();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
                ASTand jjtn001 = new ASTand(JJTAND);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        unaryLog();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
      }
    }
  }

  static final public void unaryLog() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
            ASTnot jjtn001 = new ASTnot(JJTNOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        elementLog();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
            }
      }
      break;
    case MINUS:
    case TRUE:
    case FALSE:
    case NOMBRE:
    case IDENT:
    case 48:
      elementLog();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void elementLog() throws ParseException {
    if (jj_2_4(3)) {
      booleen();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case NOMBRE:
      case IDENT:
      case 48:
        comparaison();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void comparaison() throws ParseException {
 /*@bgen(jjtree) comp */
 ASTcomp jjtn000 = new ASTcomp(JJTCOMP);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String t;
    try {
      expArith();
      t = opeComp();
                  jjtn000.value = t;
      expArith();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String opeComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
    {if (true) return Lang.getToken(0).image;}
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
    {if (true) return Lang.getToken(0).image;}
      break;
    case SUPTO:
      jj_consume_token(SUPTO);
    {if (true) return Lang.getToken(0).image;}
      break;
    case INFTO:
      jj_consume_token(INFTO);
    {if (true) return Lang.getToken(0).image;}
      break;
    case SUPEQUALTO:
      jj_consume_token(SUPEQUALTO);
    {if (true) return Lang.getToken(0).image;}
      break;
    case INFEQUALTO:
      jj_consume_token(INFEQUALTO);
    {if (true) return Lang.getToken(0).image;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void booleen() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      bool();
      break;
    case IDENT:
      appelFonction();
      break;
    case 48:
      jj_consume_token(48);
      expLog();
                   ASTbool jjtn001 = new ASTbool(JJTBOOL);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(49);
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//===============================
// EXPRESSIONS ARITHMETIQUES
//===============================
  static final public void expArith() throws ParseException {
    term();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
                 ASTplus jjtn001 = new ASTplus(JJTPLUS);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          term();
        } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  2);
                 }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
                  ASTminus jjtn002 = new ASTminus(JJTMINUS);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          term();
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void term() throws ParseException {
    unary();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
                     ASTmul jjtn001 = new ASTmul(JJTMUL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          unary();
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
        }
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
                   ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
        try {
          unary();
        } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
        } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                   }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void unary() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
              ASTmin jjtn001 = new ASTmin(JJTMIN);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
      try {
        element();
      } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  1);
              }
      }
      break;
    case NOMBRE:
    case IDENT:
    case 48:
      element();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void element() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMBRE:
      t = jj_consume_token(NOMBRE);
                   ASTarith jjtn001 = new ASTarith(JJTARITH);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                   jjtn001.value = t.image;
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      break;
    case 48:
      jj_consume_token(48);
      expArith();
                   ASTarith jjtn002 = new ASTarith(JJTARITH);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(49);
      } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      if (jj_2_5(2)) {
        appelFonction();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
                  ASTident jjtn003 = new ASTident(JJTIDENT);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
          try {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtc003 = false;
                  jjtn003.value = t.image;
          } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                  }
          }
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(SUPTO)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_35()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(NOMBRE)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(INFEQUALTO)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(SUPEQUALTO)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(INFTO)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x100000,0x0,0x200000,0x8800000,0x0,0x8800000,0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x0,0x8800000,0x2000000,0x0,0x0,0x0,0x0,0x200,0x400,0x840,0x40,0x3f000,0x0,0x60,0x60,0x180,0x180,0x40,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80,0x0,0x80,0x0,0x100,0x100,0x100,0x100,0x11120,0x40000,0x11120,0x1000,0x10120,0x18,0x1038,0x0,0x0,0x3,0x3,0x40000,0x80,0x0,0x0,0x10138,0x10120,0x0,0x10118,0x0,0x0,0x0,0x0,0x10120,0x10020,0x100,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lang(LangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
