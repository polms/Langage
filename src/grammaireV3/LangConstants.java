/* Generated By:JJTree&JavaCC: Do not edit this line. LangConstants.java */
package grammaireV3;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int AND = 10;
  /** RegularExpression Id. */
  int NOT = 11;
  /** RegularExpression Id. */
  int SUPTO = 12;
  /** RegularExpression Id. */
  int INFTO = 13;
  /** RegularExpression Id. */
  int SUPEQUALTO = 14;
  /** RegularExpression Id. */
  int INFEQUALTO = 15;
  /** RegularExpression Id. */
  int EQUAL = 16;
  /** RegularExpression Id. */
  int NOTEQUAL = 17;
  /** RegularExpression Id. */
  int ALGO = 18;
  /** RegularExpression Id. */
  int DEBUT = 19;
  /** RegularExpression Id. */
  int VAR = 20;
  /** RegularExpression Id. */
  int CONST = 21;
  /** RegularExpression Id. */
  int END = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int THEN = 24;
  /** RegularExpression Id. */
  int ELSE = 25;
  /** RegularExpression Id. */
  int ENDIF = 26;
  /** RegularExpression Id. */
  int WHILE = 27;
  /** RegularExpression Id. */
  int DO = 28;
  /** RegularExpression Id. */
  int ENDWHILE = 29;
  /** RegularExpression Id. */
  int FOR = 30;
  /** RegularExpression Id. */
  int SWITCH = 31;
  /** RegularExpression Id. */
  int PROCEDURE = 32;
  /** RegularExpression Id. */
  int FUNCTION = 33;
  /** RegularExpression Id. */
  int RETURN = 34;
  /** RegularExpression Id. */
  int TRUE = 35;
  /** RegularExpression Id. */
  int FALSE = 36;
  /** RegularExpression Id. */
  int NOMBRE = 37;
  /** RegularExpression Id. */
  int CHIFFRE = 38;
  /** RegularExpression Id. */
  int TYPE = 39;
  /** RegularExpression Id. */
  int IDENT = 40;
  /** RegularExpression Id. */
  int LETTRE = 41;
  /** RegularExpression Id. */
  int LETTREMIN = 42;
  /** RegularExpression Id. */
  int LETTREMAJ = 43;
  /** RegularExpression Id. */
  int STRING = 44;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"=\"",
    "\"<>\"",
    "\"algo\"",
    "\"begin\"",
    "\"var\"",
    "\"const\"",
    "\"end\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"endif\"",
    "\"while\"",
    "\"do\"",
    "\"endwhile\"",
    "\"for\"",
    "\"switch\"",
    "\"procedure\"",
    "\"function\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "<NOMBRE>",
    "<CHIFFRE>",
    "<TYPE>",
    "<IDENT>",
    "<LETTRE>",
    "<LETTREMIN>",
    "<LETTREMAJ>",
    "<STRING>",
    "\";\"",
    "\"<-\"",
    "\":=\"",
    "\"(\"",
    "\")\"",
    "\",\"",
  };

}
