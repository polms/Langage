/* Generated By:JJTree: Do not edit this line. ASTcomp.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package grammaireV3;

public
class ASTcomp extends SimpleNode {
  public ASTcomp(int id) {
    super(id);
  }

  public ASTcomp(Lang p, int id) {
    super(p, id);
  }

  private Boolean compare (Float b, Float c, String a) {
	  Boolean d;
	  if (a.equals("=")) d = (b==c);
	    else if (a.equals(">")) d = (b>c);
	    else if (a.equals("<")) d = (b<c);
	    else if (a.equals(">=")) d = (b>=c);
	    else if (a.equals("<=")) d = (b<=c);
	    else d = (b!=c);
	  return d;
  }
  
  public void run() throws Exception {
	  assert this.jjtGetNumChildren() == 2;
	  for (Node n : this.children) {
		  ((MyNode)n).run();
	  }
	  Object v2 = MyNode.pop();
	  Object v1 = MyNode.pop();
	  String a = (String)this.value;
	  Boolean d;
	  if (v1 instanceof Integer && v2 instanceof Integer) {
		  d = compare(((Integer)v1).floatValue() ,((Integer)v2).floatValue(), a);  
	  } else if (v1 instanceof Float && v2 instanceof Float) {
		  d = compare((Float)v1 ,(Float)v2, a);
	  } else if (v1 instanceof Float && v2 instanceof Integer) {
		  d = compare((Float)v1 , ((Integer)v2).floatValue(), a);
	  } else if (v1 instanceof Integer && v2 instanceof Float) {
		  d = compare(((Integer)v1).floatValue(),  (Float)v2, a);
	  } else {
		  throw new Exception("Internal type error");
	  }

	    MyNode.push(d);
	  
  }
}
/* JavaCC - OriginalChecksum=4e09c61a8d7ef13bb25797dd22e92e66 (do not edit this line) */
